{"componentChunkName":"component---src-templates-blog-js","path":"/blog/takingNotes","result":{"data":{"markdownRemark":{"frontmatter":{"title":"How I Take Notes on Tech Books","date":"2019-11-04","tags":["Javascript"]},"html":"<h2>Why I take notes</h2>\n<p>Confession: When I was in high school and college, I took very few notes. The ones I did take were pretty much useless. It's honestly a skill I didn't really learn until after college. </p>\n<p>Now I take notes so I know that I understand what I'm reading and so I can refer to bits of knowledge later. As I go through a book or article, I sit down and rewrite anything in the text that isn't clear to me, in my own words.</p>\n<p>I'll also write down direct quotes, usually definitions and descriptions where I don't feel like rewriting would add any clarity for me.</p>\n<p>I thought it would be fun to share an example of my notes for a book that I've been reading - <a href=\"https://pragprog.com/book/es6tips/simplifying-javascript\">Simplifying JavaScript</a> by Joe Morgan.</p>\n<p>I've been writing JavaScript for a couple of years now, but there are still gaps in my knowledge. Especially when it comes to older JavaScript vs. the newer modern syntax. I'll often use the more modern syntax without knowing why it's preferred or whether it even IS better to use.</p>\n<p>This book is certainly helping me with that and I recommend it.</p>\n<h2>Example of my notes</h2>\n<p>For your viewing pleasure, here's a sample of the notes I've taken for this book. Here you can see that I've rewritten a couple of the authors examples (and then run them to make sure they actually do work) so that I know that I understand what's going on.</p>\n<p>BEGIN NOTES</p>\n<h2>Tips 2 &#x26; 3</h2>\n<p><code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> are block scoped - any variable declared inside a block doesn't exist outside a block</p>\n<p>with <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code> you can't redeclare a variable of the same name</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"AliLynne\"</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"Ali Thompson\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'me' has already been declared</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"AliLynne\"</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"Ali Thompson\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Uncaught SyntaxError: Identifier 'me' has already been declared</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token string\">\"AliLynne\"</span>\n\n<span class=\"token operator\">...</span>\n\nme <span class=\"token operator\">=</span> <span class=\"token string\">\"Ali Thompson\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Ali Thompson</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>\"Variables assigned with var are functionally scoped (which, again, is technically referred to as lexically scoped). That means that they’ll always refer to the last value they’re assigned within a function.\"</p>\n</blockquote>\n<blockquote>\n<p>\"closures (creating a variable inside a function for another function to use)\"</p>\n</blockquote>\n<blockquote>\n<p>\"higher-order functions (functions that return other functions)\"</p>\n</blockquote>\n<ul>\n<li>Self invoking functions? - More to come in Tip 34</li>\n</ul>\n<blockquote>\n<p>\"<code class=\"language-text\">let</code> locks the value during each iteration of the for loop.\"</p>\n</blockquote>\n<p>END NOTES</p>\n<h2>More detailed code example</h2>\n<p>A few tips later, the author goes into details on arrays and objects and includes an example of iterating over objects using an array of their keys and a loop. He used a baseball example. I rewrote it. This naming convention was clearer to me when writing an example but I wouldn't use it in actual code due to a loss of clarity.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-js line-numbers\"><code class=\"language-js\">  <span class=\"token keyword\">const</span> object1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key1<span class=\"token operator\">:</span> <span class=\"token string\">\"object1value1\"</span><span class=\"token punctuation\">,</span>\n    key2<span class=\"token operator\">:</span> <span class=\"token string\">\"object1value2\"</span><span class=\"token punctuation\">,</span>\n    key3<span class=\"token operator\">:</span> <span class=\"token string\">\"object1value3\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">const</span> object2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    key1<span class=\"token operator\">:</span> <span class=\"token string\">\"object2value1\"</span><span class=\"token punctuation\">,</span>\n    key2<span class=\"token operator\">:</span> <span class=\"token string\">\"object2value2\"</span><span class=\"token punctuation\">,</span>\n    key3<span class=\"token operator\">:</span> <span class=\"token string\">\"object2value3\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Because the keys for both objects are identical, it doesn't matter which object we use to get the list of keys</span>\n  <span class=\"token keyword\">const</span> keyList <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object1<span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Now we can loop through either of the objects using their keys</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> keyList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> key <span class=\"token operator\">=</span> keyList<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I'm a value of the first object: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>object1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and I'm a value of the second object </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>object2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// I'm a value of the first object: object1value1 and I'm a value of the second object: object2value1</span>\n  <span class=\"token comment\">// I'm a value of the first object: object1value2 and I'm a value of the second object: object2value2</span>\n  <span class=\"token comment\">// I'm a value of the first object: object1value3 and I'm a value of the second object: object2value3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Where do I put my notes?</h2>\n<p>Writing this post was fairly easy since I actually write most of my notes in markdown and my blog uses markdown files for posts. I keep a directory that is full of nothing but notes. It looks a bit like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">+-- Notes\n|   +-- TitleOfBookOrArticle1\n    |   +-- NotesOnBook1.md\n    |   +-- OtherUsefulInfo.md\n    +-- TitleOfBookOrArticle2\n    |   +-- NotesOnBook2.md\n    |   +-- OtherUsefulInfo.md\n    +-- TitleOfBookOrArticle\n    |   +-- NotesOnBook2\n        |   +-- Chapter1\n        |   +-- Chapter2\n    |   +-- OtherUsefulInfo.md</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>I like to keep notes in markdown form because it makes transferring them to a blog or a project aboutme pretty easy.</p>\n<h2>This is just my approach</h2>\n<p>It took me years to find a system that worked well for me when it comes to note taking. I tried all kinds of methods and organization systems and just kept what worked for me. I always encourage people to try a few things and find what works.</p>"}},"pageContext":{"slug":"takingNotes"}},"staticQueryHashes":["1576482507","1749249851","3010532460","4202924991"]}